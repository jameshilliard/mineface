-names = [t('status.accepted'), t('status.rejected'), t('status.hardware_errors')]
- @devs ||= []
.panel.panel-default{'data-tooltip-container' => 'true'}
  .panel-heading
    %h3.panel-title
      %i.icon-hdd
      =t('device.plural').titleize
      %small.text-muted#devices_overview
        - unless @devs.empty?
          = pluralize(@devs.length, t('device.singular'), t('device.plural'))
          %span{style: 'font-size: 0.8em'}
            -types = [:cpu, :gpu, :pga].map{|t| [t, t("device.type.#{t}")]}.map{|a| count = @devs.count{|d| d[:type] == a[0]};count == 0? nil: pluralize(count,a[1])}.compact.join(', ')
            ="(#{types})"
  %table.table.table-striped
    %thead
      %tr
        %th=t('title.name')
        %th=t('title.type')
        %th=t('title.status')
        %th=t('title.temperature')
        %th
          %span#device_5savg{data: { tooltip: t('title.avg_5s')}} Mh/s
        %th=names.join('/')
        %th=t('title.utility')
    %tbody
      -if @devs.length == 0
        %tr
          %td{colspan:7}
            .text-center=t('device.none')
      -else
        -@devs.each do |dev|
          - did = "device_#{dev[:type]}#{dev[:id]}"
          -status = dev[:enabled]? dev[:status].to_s.underscore.to_sym: :disabled
          %tr{id: did, class:  status == :alive ? :success: status == :disabled ? :warning: :danger}
            %td=dev[:name]
            %td=t("device.type.#{dev[:type]}").titleize
            %td
              =t("status.#{status}").titleize
              -if dev[:type] != :cpu && privileged?
                =link_to(status == :disabled ? enable_device_path(dev[:type], dev[:id], :json): disable_device_path(dev[:type], dev[:id], :json), remote: true, data: {'scheduler-exec' => 'devs', perform: t('device.action.progress.toggle')}) do
                  %i{class: "no_underline icon-check#{status == :disabled ? '-empty': ''}", title: status == :disabled ? t('device.action.enable'): t('device.action.disable')}<>
            %td= dev[:temperature].nil?? t('message.not_applicable'): dev[:temperature].round(2)
            %td=mhash_to_s(dev[:mhs_5s])
            %td
              :ruby
                keys = [:accepted, :rejected, :hardware_errors]
                classes = %w(success warning danger)
                vals = keys.map{|k| dev[k]}
                total = vals.reduce(:+)
                perc = keys.map{|k| total == 0? 0: (dev[k].to_f / total.to_f) * 100.0}
              .progress{style: 'margin-bottom:0'}
                - keys.each_with_index do |key,index|
                  - val = dev[key]
                  .progress-bar{id: "#{did}_#{names[index].downcase}",style:"width: #{perc[index].round(2)}%", data:{tooltip: "#{val} #{names[index].downcase} (#{perc[index].round(2)}%)"}, class: "progress-bar-#{classes[index]}"}
            %td=dev[:utility]